plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id("dagger.hilt.android.plugin")
}

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //loop all configs and create a build config field for each config
        rootProject.ext.projectConfigurations.each { p ->
            if (p.key != 'VERSION_MAJOR' && p.key != 'VERSION_MAJOR' && p.key != 'VERSION_PATCH' && p.key != 'APPLICATION_ID') {
                buildConfigField 'String', p.key, p.value
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "default"

    productFlavors {
        [dev, prod].each {
            it.applicationId projectConfigurations.getProperty("APPLICATION_ID").replace("\"", "")
            it.versionCode computeVersionCode(versionMajor, versionMinor, versionPatch)
            it.versionName computeVersionName(versionMajor, versionMinor, versionPatch)

            //app name is inside the config file
            if (projectConfigurations.containsKey("APP_NAME"))
                it.manifestPlaceholders = [appLabel: projectConfigurations.getProperty("APP_NAME").replace("\"", "")]
        }
        prod {
            manifestPlaceholders = [appLabel: "@string/app_name"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/*']
        }
        jniLibs {
            excludes += ['META-INF/*']
        }

        resources.excludes.add("META-INF/*")
    }

    configurations {
        devImplementation
        prodImplementation
    }
}
dependencies {
    implementation "com.google.android.material:material:${versions.material_version}"
    implementation androidx.core_ktx
    implementation androidx.appcompat
    implementation androidx.constraintlayout
    implementation("androidx.cardview:cardview:1.0.0")
    implementation lifecycle.livedata_ktx
    androidTestImplementation androidx.test_junit
    androidTestImplementation androidx.test_espresso
    testImplementation "junit:junit:${versions.junit_version}"


    implementation project(path: ':core')

    //Coroutine
    implementation coroutines.android
    implementation coroutines.core
    implementation coroutines.test

    //LifeCycle
    implementation lifecycle.viewmodel_ktx
    implementation lifecycle.runtime_ktx
    implementation lifecycle.extensions
    implementation lifecycle.livedata_ktx

    //androidx
    implementation androidx.fragment_ktx
    implementation androidx.swiperefreshlayout

    //Hilt
    implementation dagger_hilt.hilt_android
    kapt dagger_hilt.hilt_compiler

    //Retrofit
    implementation retrofit2.retrofit
    implementation retrofit2.converter_gson
    implementation retrofit2.okhttp_logging_interceptor

    //Room
    implementation room.room_runtime
    implementation room.room_ktx
    kapt room.room_compiler

    implementation "org.jetbrains.kotlin:kotlin-reflect"

}

